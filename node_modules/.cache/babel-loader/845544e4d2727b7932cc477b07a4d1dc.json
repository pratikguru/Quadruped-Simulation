{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = plotComponentFactory;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n} // The naming convention is:\n//   - events are attached as `'plotly_' + eventName.toLowerCase()`\n//   - react props are `'on' + eventName`\n\n\nvar eventNames = ['AfterExport', 'AfterPlot', 'Animated', 'AnimatingFrame', 'AnimationInterrupted', 'AutoSize', 'BeforeExport', 'BeforeHover', 'ButtonClicked', 'Click', 'ClickAnnotation', 'Deselect', 'DoubleClick', 'Framework', 'Hover', 'LegendClick', 'LegendDoubleClick', 'Relayout', 'Relayouting', 'Restyle', 'Redraw', 'Selected', 'Selecting', 'SliderChange', 'SliderEnd', 'SliderStart', 'SunburstClick', 'Transitioning', 'TransitionInterrupted', 'Unhover'];\nvar updateEvents = ['plotly_restyle', 'plotly_redraw', 'plotly_relayout', 'plotly_relayouting', 'plotly_doubleclick', 'plotly_animated', 'plotly_sunburstclick']; // Check if a window is available since SSR (server-side rendering)\n// breaks unnecessarily if you try to use it server-side.\n\nvar isBrowser = typeof window !== 'undefined';\n\nfunction plotComponentFactory(Plotly) {\n  var PlotlyComponent = /*#__PURE__*/function (_Component) {\n    _inherits(PlotlyComponent, _Component);\n\n    var _super = _createSuper(PlotlyComponent);\n\n    function PlotlyComponent(props) {\n      var _this;\n\n      _classCallCheck(this, PlotlyComponent);\n\n      _this = _super.call(this, props);\n      _this.p = Promise.resolve();\n      _this.resizeHandler = null;\n      _this.handlers = {};\n      _this.syncWindowResize = _this.syncWindowResize.bind(_assertThisInitialized(_this));\n      _this.syncEventHandlers = _this.syncEventHandlers.bind(_assertThisInitialized(_this));\n      _this.attachUpdateEvents = _this.attachUpdateEvents.bind(_assertThisInitialized(_this));\n      _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n      _this.handleUpdate = _this.handleUpdate.bind(_assertThisInitialized(_this));\n      _this.figureCallback = _this.figureCallback.bind(_assertThisInitialized(_this));\n      _this.updatePlotly = _this.updatePlotly.bind(_assertThisInitialized(_this));\n      return _this;\n    }\n\n    _createClass(PlotlyComponent, [{\n      key: \"updatePlotly\",\n      value: function updatePlotly(shouldInvokeResizeHandler, figureCallbackFunction, shouldAttachUpdateEvents) {\n        var _this2 = this;\n\n        this.p = this.p.then(function () {\n          if (_this2.unmounting) {\n            return;\n          }\n\n          if (!_this2.el) {\n            throw new Error('Missing element reference');\n          } // eslint-disable-next-line consistent-return\n\n\n          return Plotly.react(_this2.el, {\n            data: _this2.props.data,\n            layout: _this2.props.layout,\n            config: _this2.props.config,\n            frames: _this2.props.frames\n          });\n        }).then(function () {\n          if (_this2.unmounting) {\n            return;\n          }\n\n          _this2.syncWindowResize(shouldInvokeResizeHandler);\n\n          _this2.syncEventHandlers();\n\n          _this2.figureCallback(figureCallbackFunction);\n\n          if (shouldAttachUpdateEvents) {\n            _this2.attachUpdateEvents();\n          }\n        })[\"catch\"](function (err) {\n          if (_this2.props.onError) {\n            _this2.props.onError(err);\n          }\n        });\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.unmounting = false;\n        this.updatePlotly(true, this.props.onInitialized, true);\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        this.unmounting = false; // frames *always* changes identity so fall back to check length only :(\n\n        var numPrevFrames = prevProps.frames && prevProps.frames.length ? prevProps.frames.length : 0;\n        var numNextFrames = this.props.frames && this.props.frames.length ? this.props.frames.length : 0;\n        var figureChanged = !(prevProps.layout === this.props.layout && prevProps.data === this.props.data && prevProps.config === this.props.config && numNextFrames === numPrevFrames);\n        var revisionDefined = prevProps.revision !== void 0;\n        var revisionChanged = prevProps.revision !== this.props.revision;\n\n        if (!figureChanged && (!revisionDefined || revisionDefined && !revisionChanged)) {\n          return;\n        }\n\n        this.updatePlotly(false, this.props.onUpdate, false);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.unmounting = true;\n        this.figureCallback(this.props.onPurge);\n\n        if (this.resizeHandler && isBrowser) {\n          window.removeEventListener('resize', this.resizeHandler);\n          this.resizeHandler = null;\n        }\n\n        this.removeUpdateEvents();\n        Plotly.purge(this.el);\n      }\n    }, {\n      key: \"attachUpdateEvents\",\n      value: function attachUpdateEvents() {\n        var _this3 = this;\n\n        if (!this.el || !this.el.removeListener) {\n          return;\n        }\n\n        updateEvents.forEach(function (updateEvent) {\n          _this3.el.on(updateEvent, _this3.handleUpdate);\n        });\n      }\n    }, {\n      key: \"removeUpdateEvents\",\n      value: function removeUpdateEvents() {\n        var _this4 = this;\n\n        if (!this.el || !this.el.removeListener) {\n          return;\n        }\n\n        updateEvents.forEach(function (updateEvent) {\n          _this4.el.removeListener(updateEvent, _this4.handleUpdate);\n        });\n      }\n    }, {\n      key: \"handleUpdate\",\n      value: function handleUpdate() {\n        this.figureCallback(this.props.onUpdate);\n      }\n    }, {\n      key: \"figureCallback\",\n      value: function figureCallback(callback) {\n        if (typeof callback === 'function') {\n          var _this$el = this.el,\n              data = _this$el.data,\n              layout = _this$el.layout;\n          var frames = this.el._transitionData ? this.el._transitionData._frames : null;\n          var figure = {\n            data: data,\n            layout: layout,\n            frames: frames\n          };\n          callback(figure, this.el);\n        }\n      }\n    }, {\n      key: \"syncWindowResize\",\n      value: function syncWindowResize(invoke) {\n        var _this5 = this;\n\n        if (!isBrowser) {\n          return;\n        }\n\n        if (this.props.useResizeHandler && !this.resizeHandler) {\n          this.resizeHandler = function () {\n            return Plotly.Plots.resize(_this5.el);\n          };\n\n          window.addEventListener('resize', this.resizeHandler);\n\n          if (invoke) {\n            this.resizeHandler();\n          }\n        } else if (!this.props.useResizeHandler && this.resizeHandler) {\n          window.removeEventListener('resize', this.resizeHandler);\n          this.resizeHandler = null;\n        }\n      }\n    }, {\n      key: \"getRef\",\n      value: function getRef(el) {\n        this.el = el;\n\n        if (this.props.debug && isBrowser) {\n          window.gd = this.el;\n        }\n      } // Attach and remove event handlers as they're added or removed from props:\n\n    }, {\n      key: \"syncEventHandlers\",\n      value: function syncEventHandlers() {\n        var _this6 = this;\n\n        eventNames.forEach(function (eventName) {\n          var prop = _this6.props['on' + eventName];\n          var handler = _this6.handlers[eventName];\n          var hasHandler = Boolean(handler);\n\n          if (prop && !hasHandler) {\n            _this6.addEventHandler(eventName, prop);\n          } else if (!prop && hasHandler) {\n            // Needs to be removed:\n            _this6.removeEventHandler(eventName);\n          } else if (prop && hasHandler && prop !== handler) {\n            // replace the handler\n            _this6.removeEventHandler(eventName);\n\n            _this6.addEventHandler(eventName, prop);\n          }\n        });\n      }\n    }, {\n      key: \"addEventHandler\",\n      value: function addEventHandler(eventName, prop) {\n        this.handlers[eventName] = prop;\n        this.el.on(this.getPlotlyEventName(eventName), this.handlers[eventName]);\n      }\n    }, {\n      key: \"removeEventHandler\",\n      value: function removeEventHandler(eventName) {\n        this.el.removeListener(this.getPlotlyEventName(eventName), this.handlers[eventName]);\n        delete this.handlers[eventName];\n      }\n    }, {\n      key: \"getPlotlyEventName\",\n      value: function getPlotlyEventName(eventName) {\n        return 'plotly_' + eventName.toLowerCase();\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return (/*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n            id: this.props.divId,\n            style: this.props.style,\n            ref: this.getRef,\n            className: this.props.className\n          })\n        );\n      }\n    }]);\n\n    return PlotlyComponent;\n  }(_react.Component);\n\n  PlotlyComponent.propTypes = {\n    data: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].object),\n    config: _propTypes[\"default\"].object,\n    layout: _propTypes[\"default\"].object,\n    frames: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].object),\n    revision: _propTypes[\"default\"].number,\n    onInitialized: _propTypes[\"default\"].func,\n    onPurge: _propTypes[\"default\"].func,\n    onError: _propTypes[\"default\"].func,\n    onUpdate: _propTypes[\"default\"].func,\n    debug: _propTypes[\"default\"].bool,\n    style: _propTypes[\"default\"].object,\n    className: _propTypes[\"default\"].string,\n    useResizeHandler: _propTypes[\"default\"].bool,\n    divId: _propTypes[\"default\"].string\n  };\n  eventNames.forEach(function (eventName) {\n    PlotlyComponent.propTypes['on' + eventName] = _propTypes[\"default\"].func;\n  });\n  PlotlyComponent.defaultProps = {\n    debug: false,\n    useResizeHandler: false,\n    data: [],\n    style: {\n      position: 'relative',\n      display: 'inline-block'\n    }\n  };\n  return PlotlyComponent;\n}","map":{"version":3,"sources":["../src/factory.js"],"names":["eventNames","updateEvents","isBrowser","PlotlyComponent","Component","Promise","data","layout","config","frames","numPrevFrames","prevProps","numNextFrames","figureChanged","revisionDefined","revisionChanged","window","Plotly","figure","callback","prop","handler","hasHandler","Boolean","eventName","className","PropTypes","revision","onInitialized","onPurge","onError","onUpdate","debug","style","useResizeHandler","divId","string","position","display"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEA;AACA;AACA;;;AACA,IAAMA,UAAU,GAAG,CAAA,aAAA,EAAA,WAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,sBAAA,EAAA,UAAA,EAAA,cAAA,EAAA,aAAA,EAAA,eAAA,EAAA,OAAA,EAAA,iBAAA,EAAA,UAAA,EAAA,aAAA,EAAA,WAAA,EAAA,OAAA,EAAA,aAAA,EAAA,mBAAA,EAAA,UAAA,EAAA,aAAA,EAAA,SAAA,EAAA,QAAA,EAAA,UAAA,EAAA,WAAA,EAAA,cAAA,EAAA,WAAA,EAAA,aAAA,EAAA,eAAA,EAAA,eAAA,EAAA,uBAAA,EAAnB,SAAmB,CAAnB;AAiCA,IAAMC,YAAY,GAAG,CAAA,gBAAA,EAAA,eAAA,EAAA,iBAAA,EAAA,oBAAA,EAAA,oBAAA,EAAA,iBAAA,EAArB,sBAAqB,CAArB,C,CAUA;AACA;;AACA,IAAMC,SAAS,GAAG,OAAA,MAAA,KAAlB,WAAA;;AAEe,SAAA,oBAAA,CAAA,MAAA,EAAsC;AAAA,MAC7CC,eAD6C,GAAA,aAAA,UAAA,UAAA,EAAA;AAAA,IAAA,SAAA,CAAA,eAAA,EAAA,UAAA,CAAA;;AAAA,QAAA,MAAA,GAAA,YAAA,CAAA,eAAA,CAAA;;AAEjD,aAAA,eAAA,CAAA,KAAA,EAAmB;AAAA,UAAA,KAAA;;AAAA,MAAA,eAAA,CAAA,IAAA,EAAA,eAAA,CAAA;;AACjB,MAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA;AAEA,MAAA,KAAA,CAAA,CAAA,GAASE,OAAO,CAAhB,OAASA,EAAT;AACA,MAAA,KAAA,CAAA,aAAA,GAAA,IAAA;AACA,MAAA,KAAA,CAAA,QAAA,GAAA,EAAA;AAEA,MAAA,KAAA,CAAA,gBAAA,GAAwB,KAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,sBAAA,CAAxB,KAAwB,CAAA,CAAxB;AACA,MAAA,KAAA,CAAA,iBAAA,GAAyB,KAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,sBAAA,CAAzB,KAAyB,CAAA,CAAzB;AACA,MAAA,KAAA,CAAA,kBAAA,GAA0B,KAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,sBAAA,CAA1B,KAA0B,CAAA,CAA1B;AACA,MAAA,KAAA,CAAA,MAAA,GAAc,KAAA,CAAA,MAAA,CAAA,IAAA,CAAA,sBAAA,CAAd,KAAc,CAAA,CAAd;AACA,MAAA,KAAA,CAAA,YAAA,GAAoB,KAAA,CAAA,YAAA,CAAA,IAAA,CAAA,sBAAA,CAApB,KAAoB,CAAA,CAApB;AACA,MAAA,KAAA,CAAA,cAAA,GAAsB,KAAA,CAAA,cAAA,CAAA,IAAA,CAAA,sBAAA,CAAtB,KAAsB,CAAA,CAAtB;AACA,MAAA,KAAA,CAAA,YAAA,GAAoB,KAAA,CAAA,YAAA,CAAA,IAAA,CAAA,sBAAA,CAApB,KAAoB,CAAA,CAApB;AAbiB,aAAA,KAAA;AAclB;;AAhBgD,IAAA,YAAA,CAAA,eAAA,EAAA,CAAA;AAAA,MAAA,GAAA,EAAA,cAAA;AAAA,MAAA,KAAA,EAAA,SAAA,YAAA,CAAA,yBAAA,EAAA,sBAAA,EAAA,wBAAA,EAkByC;AAAA,YAAA,MAAA,GAAA,IAAA;;AACxF,aAAA,CAAA,GAAS,KAAA,CAAA,CAAA,IAAA,CACD,YAAM;AACV,cAAI,MAAI,CAAR,UAAA,EAAqB;AACnB;AACD;;AACD,cAAI,CAAC,MAAI,CAAT,EAAA,EAAc;AACZ,kBAAM,IAAA,KAAA,CAAN,2BAAM,CAAN;AALQ,WAAA,CAOV;;;AACA,iBAAO,MAAM,CAAN,KAAA,CAAa,MAAI,CAAjB,EAAA,EAAsB;AAC3BC,YAAAA,IAAI,EAAE,MAAI,CAAJ,KAAA,CADqB,IAAA;AAE3BC,YAAAA,MAAM,EAAE,MAAI,CAAJ,KAAA,CAFmB,MAAA;AAG3BC,YAAAA,MAAM,EAAE,MAAI,CAAJ,KAAA,CAHmB,MAAA;AAI3BC,YAAAA,MAAM,EAAE,MAAI,CAAJ,KAAA,CAAWA;AAJQ,WAAtB,CAAP;AATK,SAAA,EAAA,IAAA,CAgBD,YAAM;AACV,cAAI,MAAI,CAAR,UAAA,EAAqB;AACnB;AACD;;AACD,UAAA,MAAI,CAAJ,gBAAA,CAAA,yBAAA;;AACA,UAAA,MAAI,CAAJ,iBAAA;;AACA,UAAA,MAAI,CAAJ,cAAA,CAAA,sBAAA;;AACA,cAAA,wBAAA,EAA8B;AAC5B,YAAA,MAAI,CAAJ,kBAAA;AACD;AAzBI,SAAA,EAAA,OAAA,EA2BA,UAAA,GAAA,EAAS;AACd,cAAI,MAAI,CAAJ,KAAA,CAAJ,OAAA,EAAwB;AACtB,YAAA,MAAI,CAAJ,KAAA,CAAA,OAAA,CAAA,GAAA;AACD;AA9BL,SAAS,CAAT;AAgCD;AAnDgD,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,mBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,iBAAA,GAqD7B;AAClB,aAAA,UAAA,GAAA,KAAA;AAEA,aAAA,YAAA,CAAA,IAAA,EAAwB,KAAA,KAAA,CAAxB,aAAA,EAAA,IAAA;AACD;AAzDgD,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,oBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,kBAAA,CAAA,SAAA,EA2DnB;AAC5B,aAAA,UAAA,GAD4B,KAC5B,CAD4B,CAG5B;;AACA,YAAMC,aAAa,GACjBC,SAAS,CAATA,MAAAA,IAAoBA,SAAS,CAATA,MAAAA,CAApBA,MAAAA,GAA8CA,SAAS,CAATA,MAAAA,CAA9CA,MAAAA,GADF,CAAA;AAEA,YAAMC,aAAa,GACjB,KAAA,KAAA,CAAA,MAAA,IAAqB,KAAA,KAAA,CAAA,MAAA,CAArB,MAAA,GAAgD,KAAA,KAAA,CAAA,MAAA,CAAhD,MAAA,GADF,CAAA;AAGA,YAAMC,aAAa,GAAG,EACpBF,SAAS,CAATA,MAAAA,KAAqB,KAAA,KAAA,CAArBA,MAAAA,IACAA,SAAS,CAATA,IAAAA,KAAmB,KAAA,KAAA,CADnBA,IAAAA,IAEAA,SAAS,CAATA,MAAAA,KAAqB,KAAA,KAAA,CAFrBA,MAAAA,IAGAC,aAAa,KAJf,aAAsB,CAAtB;AAMA,YAAME,eAAe,GAAGH,SAAS,CAATA,QAAAA,KAAuB,KAA/C,CAAA;AACA,YAAMI,eAAe,GAAGJ,SAAS,CAATA,QAAAA,KAAuB,KAAA,KAAA,CAA/C,QAAA;;AAEA,YAAI,CAAA,aAAA,KAAmB,CAAA,eAAA,IAAqBG,eAAe,IAAI,CAA/D,eAAI,CAAJ,EAAmF;AACjF;AACD;;AAED,aAAA,YAAA,CAAA,KAAA,EAAyB,KAAA,KAAA,CAAzB,QAAA,EAAA,KAAA;AACD;AAlFgD,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,sBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,oBAAA,GAoF1B;AACrB,aAAA,UAAA,GAAA,IAAA;AAEA,aAAA,cAAA,CAAoB,KAAA,KAAA,CAApB,OAAA;;AAEA,YAAI,KAAA,aAAA,IAAJ,SAAA,EAAqC;AACnCE,UAAAA,MAAM,CAANA,mBAAAA,CAAAA,QAAAA,EAAqC,KAArCA,aAAAA;AACA,eAAA,aAAA,GAAA,IAAA;AACD;;AAED,aAAA,kBAAA;AAEAC,QAAAA,MAAM,CAANA,KAAAA,CAAa,KAAbA,EAAAA;AACD;AAjGgD,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,oBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,kBAAA,GAmG5B;AAAA,YAAA,MAAA,GAAA,IAAA;;AACnB,YAAI,CAAC,KAAD,EAAA,IAAY,CAAC,KAAA,EAAA,CAAjB,cAAA,EAAyC;AACvC;AACD;;AAEDhB,QAAAA,YAAY,CAAZA,OAAAA,CAAqB,UAAA,WAAA,EAAiB;AACpC,UAAA,MAAI,CAAJ,EAAA,CAAA,EAAA,CAAA,WAAA,EAAwB,MAAI,CAA5B,YAAA;AADFA,SAAAA;AAGD;AA3GgD,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,oBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,kBAAA,GA6G5B;AAAA,YAAA,MAAA,GAAA,IAAA;;AACnB,YAAI,CAAC,KAAD,EAAA,IAAY,CAAC,KAAA,EAAA,CAAjB,cAAA,EAAyC;AACvC;AACD;;AAEDA,QAAAA,YAAY,CAAZA,OAAAA,CAAqB,UAAA,WAAA,EAAiB;AACpC,UAAA,MAAI,CAAJ,EAAA,CAAA,cAAA,CAAA,WAAA,EAAoC,MAAI,CAAxC,YAAA;AADFA,SAAAA;AAGD;AArHgD,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,cAAA;AAAA,MAAA,KAAA,EAAA,SAAA,YAAA,GAuHlC;AACb,aAAA,cAAA,CAAoB,KAAA,KAAA,CAApB,QAAA;AACD;AAzHgD,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,gBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,cAAA,CAAA,QAAA,EA2HxB;AACvB,YAAI,OAAA,QAAA,KAAJ,UAAA,EAAoC;AAAA,cAAA,QAAA,GACX,KADW,EAAA;AAAA,cAC3BK,IAD2B,GAAA,QAAA,CAAA,IAAA;AAAA,cACrBC,MADqB,GAAA,QAAA,CAAA,MAAA;AAElC,cAAME,MAAM,GAAG,KAAA,EAAA,CAAA,eAAA,GAA0B,KAAA,EAAA,CAAA,eAAA,CAA1B,OAAA,GAAf,IAAA;AACA,cAAMS,MAAM,GAAG;AAACZ,YAAAA,IAAI,EAAL,IAAA;AAAOC,YAAAA,MAAM,EAAb,MAAA;AAAeE,YAAAA,MAAM,EAANA;AAAf,WAAf;AACAU,UAAAA,QAAQ,CAAA,MAAA,EAAS,KAAjBA,EAAQ,CAARA;AACD;AACF;AAlIgD,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,kBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,gBAAA,CAAA,MAAA,EAoIxB;AAAA,YAAA,MAAA,GAAA,IAAA;;AACvB,YAAI,CAAJ,SAAA,EAAgB;AACd;AACD;;AAED,YAAI,KAAA,KAAA,CAAA,gBAAA,IAA+B,CAAC,KAApC,aAAA,EAAwD;AACtD,eAAA,aAAA,GAAqB,YAAA;AAAA,mBAAMF,MAAM,CAANA,KAAAA,CAAAA,MAAAA,CAAoB,MAAI,CAA9B,EAAMA,CAAN;AAArB,WAAA;;AACAD,UAAAA,MAAM,CAANA,gBAAAA,CAAAA,QAAAA,EAAkC,KAAlCA,aAAAA;;AACA,cAAA,MAAA,EAAY;AACV,iBAAA,aAAA;AACD;AALH,SAAA,MAMO,IAAI,CAAC,KAAA,KAAA,CAAD,gBAAA,IAAgC,KAApC,aAAA,EAAwD;AAC7DA,UAAAA,MAAM,CAANA,mBAAAA,CAAAA,QAAAA,EAAqC,KAArCA,aAAAA;AACA,eAAA,aAAA,GAAA,IAAA;AACD;AACF;AAnJgD,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,QAAA;AAAA,MAAA,KAAA,EAAA,SAAA,MAAA,CAAA,EAAA,EAqJtC;AACT,aAAA,EAAA,GAAA,EAAA;;AAEA,YAAI,KAAA,KAAA,CAAA,KAAA,IAAJ,SAAA,EAAmC;AACjCA,UAAAA,MAAM,CAANA,EAAAA,GAAY,KAAZA,EAAAA;AACD;AA1J8C,OAAA,CA6JjD;;AA7JiD,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,mBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,iBAAA,GA8J7B;AAAA,YAAA,MAAA,GAAA,IAAA;;AAClBhB,QAAAA,UAAU,CAAVA,OAAAA,CAAmB,UAAA,SAAA,EAAe;AAChC,cAAMoB,IAAI,GAAG,MAAI,CAAJ,KAAA,CAAW,OAAxB,SAAa,CAAb;AACA,cAAMC,OAAO,GAAG,MAAI,CAAJ,QAAA,CAAhB,SAAgB,CAAhB;AACA,cAAMC,UAAU,GAAGC,OAAO,CAA1B,OAA0B,CAA1B;;AAEA,cAAIH,IAAI,IAAI,CAAZ,UAAA,EAAyB;AACvB,YAAA,MAAI,CAAJ,eAAA,CAAA,SAAA,EAAA,IAAA;AADF,WAAA,MAEO,IAAI,CAAA,IAAA,IAAJ,UAAA,EAAyB;AAC9B;AACA,YAAA,MAAI,CAAJ,kBAAA,CAAA,SAAA;AAFK,WAAA,MAGA,IAAIA,IAAI,IAAJA,UAAAA,IAAsBA,IAAI,KAA9B,OAAA,EAA4C;AACjD;AACA,YAAA,MAAI,CAAJ,kBAAA,CAAA,SAAA;;AACA,YAAA,MAAI,CAAJ,eAAA,CAAA,SAAA,EAAA,IAAA;AACD;AAdHpB,SAAAA;AAgBD;AA/KgD,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,iBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,eAAA,CAAA,SAAA,EAAA,IAAA,EAiLhB;AAC/B,aAAA,QAAA,CAAA,SAAA,IAAA,IAAA;AACA,aAAA,EAAA,CAAA,EAAA,CAAW,KAAA,kBAAA,CAAX,SAAW,CAAX,EAA+C,KAAA,QAAA,CAA/C,SAA+C,CAA/C;AACD;AApLgD,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,oBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,kBAAA,CAAA,SAAA,EAsLnB;AAC5B,aAAA,EAAA,CAAA,cAAA,CAAuB,KAAA,kBAAA,CAAvB,SAAuB,CAAvB,EAA2D,KAAA,QAAA,CAA3D,SAA2D,CAA3D;AACA,eAAO,KAAA,QAAA,CAAP,SAAO,CAAP;AACD;AAzLgD,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,oBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,kBAAA,CAAA,SAAA,EA2LnB;AAC5B,eAAO,YAAYwB,SAAS,CAA5B,WAAmBA,EAAnB;AACD;AA7LgD,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,QAAA;AAAA,MAAA,KAAA,EAAA,SAAA,MAAA,GA+LxC;AACP,eAAA,cACE,MAAA,CAAA,SAAA,CAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,YAAA,EAAE,EAAE,KAAA,KAAA,CADN,KAAA;AAEE,YAAA,KAAK,EAAE,KAAA,KAAA,CAFT,KAAA;AAGE,YAAA,GAAG,EAAE,KAHP,MAAA;AAIE,YAAA,SAAS,EAAE,KAAA,KAAA,CAAWC;AAJxB,WAAA;AADF;AAQD;AAxMgD,KAAA,CAAA,CAAA;;AAAA,WAAA,eAAA;AAAA,GAAA,CACrBrB,MAAAA,CADqB,SAAA,CAAA;;AA2MnDD,EAAAA,eAAe,CAAfA,SAAAA,GAA4B;AAC1BG,IAAAA,IAAI,EAAEoB,UAAAA,CAAAA,SAAAA,CAAAA,CAAAA,OAAAA,CAAkBA,UAAAA,CAAAA,SAAAA,CAAAA,CADE,MACpBA,CADoB;AAE1BlB,IAAAA,MAAM,EAAEkB,UAAAA,CAAAA,SAAAA,CAAAA,CAFkB,MAAA;AAG1BnB,IAAAA,MAAM,EAAEmB,UAAAA,CAAAA,SAAAA,CAAAA,CAHkB,MAAA;AAI1BjB,IAAAA,MAAM,EAAEiB,UAAAA,CAAAA,SAAAA,CAAAA,CAAAA,OAAAA,CAAkBA,UAAAA,CAAAA,SAAAA,CAAAA,CAJA,MAIlBA,CAJkB;AAK1BC,IAAAA,QAAQ,EAAED,UAAAA,CAAAA,SAAAA,CAAAA,CALgB,MAAA;AAM1BE,IAAAA,aAAa,EAAEF,UAAAA,CAAAA,SAAAA,CAAAA,CANW,IAAA;AAO1BG,IAAAA,OAAO,EAAEH,UAAAA,CAAAA,SAAAA,CAAAA,CAPiB,IAAA;AAQ1BI,IAAAA,OAAO,EAAEJ,UAAAA,CAAAA,SAAAA,CAAAA,CARiB,IAAA;AAS1BK,IAAAA,QAAQ,EAAEL,UAAAA,CAAAA,SAAAA,CAAAA,CATgB,IAAA;AAU1BM,IAAAA,KAAK,EAAEN,UAAAA,CAAAA,SAAAA,CAAAA,CAVmB,IAAA;AAW1BO,IAAAA,KAAK,EAAEP,UAAAA,CAAAA,SAAAA,CAAAA,CAXmB,MAAA;AAY1BD,IAAAA,SAAS,EAAEC,UAAAA,CAAAA,SAAAA,CAAAA,CAZe,MAAA;AAa1BQ,IAAAA,gBAAgB,EAAER,UAAAA,CAAAA,SAAAA,CAAAA,CAbQ,IAAA;AAc1BS,IAAAA,KAAK,EAAET,UAAAA,CAAAA,SAAAA,CAAAA,CAAUU;AAdS,GAA5BjC;AAiBAH,EAAAA,UAAU,CAAVA,OAAAA,CAAmB,UAAA,SAAA,EAAe;AAChCG,IAAAA,eAAe,CAAfA,SAAAA,CAA0B,OAA1BA,SAAAA,IAA8CuB,UAAAA,CAAAA,SAAAA,CAAAA,CAA9CvB,IAAAA;AADFH,GAAAA;AAIAG,EAAAA,eAAe,CAAfA,YAAAA,GAA+B;AAC7B6B,IAAAA,KAAK,EADwB,KAAA;AAE7BE,IAAAA,gBAAgB,EAFa,KAAA;AAG7B5B,IAAAA,IAAI,EAHyB,EAAA;AAI7B2B,IAAAA,KAAK,EAAE;AAACI,MAAAA,QAAQ,EAAT,UAAA;AAAuBC,MAAAA,OAAO,EAAE;AAAhC;AAJsB,GAA/BnC;AAOA,SAAA,eAAA;AACD","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n// The naming convention is:\n//   - events are attached as `'plotly_' + eventName.toLowerCase()`\n//   - react props are `'on' + eventName`\nconst eventNames = [\n  'AfterExport',\n  'AfterPlot',\n  'Animated',\n  'AnimatingFrame',\n  'AnimationInterrupted',\n  'AutoSize',\n  'BeforeExport',\n  'BeforeHover',\n  'ButtonClicked',\n  'Click',\n  'ClickAnnotation',\n  'Deselect',\n  'DoubleClick',\n  'Framework',\n  'Hover',\n  'LegendClick',\n  'LegendDoubleClick',\n  'Relayout',\n  'Relayouting',\n  'Restyle',\n  'Redraw',\n  'Selected',\n  'Selecting',\n  'SliderChange',\n  'SliderEnd',\n  'SliderStart',\n  'SunburstClick',\n  'Transitioning',\n  'TransitionInterrupted',\n  'Unhover',\n];\n\nconst updateEvents = [\n  'plotly_restyle',\n  'plotly_redraw',\n  'plotly_relayout',\n  'plotly_relayouting',\n  'plotly_doubleclick',\n  'plotly_animated',\n  'plotly_sunburstclick',\n];\n\n// Check if a window is available since SSR (server-side rendering)\n// breaks unnecessarily if you try to use it server-side.\nconst isBrowser = typeof window !== 'undefined';\n\nexport default function plotComponentFactory(Plotly) {\n  class PlotlyComponent extends Component {\n    constructor(props) {\n      super(props);\n\n      this.p = Promise.resolve();\n      this.resizeHandler = null;\n      this.handlers = {};\n\n      this.syncWindowResize = this.syncWindowResize.bind(this);\n      this.syncEventHandlers = this.syncEventHandlers.bind(this);\n      this.attachUpdateEvents = this.attachUpdateEvents.bind(this);\n      this.getRef = this.getRef.bind(this);\n      this.handleUpdate = this.handleUpdate.bind(this);\n      this.figureCallback = this.figureCallback.bind(this);\n      this.updatePlotly = this.updatePlotly.bind(this);\n    }\n\n    updatePlotly(shouldInvokeResizeHandler, figureCallbackFunction, shouldAttachUpdateEvents) {\n      this.p = this.p\n        .then(() => {\n          if (this.unmounting) {\n            return;\n          }\n          if (!this.el) {\n            throw new Error('Missing element reference');\n          }\n          // eslint-disable-next-line consistent-return\n          return Plotly.react(this.el, {\n            data: this.props.data,\n            layout: this.props.layout,\n            config: this.props.config,\n            frames: this.props.frames,\n          });\n        })\n        .then(() => {\n          if (this.unmounting) {\n            return;\n          }\n          this.syncWindowResize(shouldInvokeResizeHandler);\n          this.syncEventHandlers();\n          this.figureCallback(figureCallbackFunction);\n          if (shouldAttachUpdateEvents) {\n            this.attachUpdateEvents();\n          }\n        })\n        .catch((err) => {\n          if (this.props.onError) {\n            this.props.onError(err);\n          }\n        });\n    }\n\n    componentDidMount() {\n      this.unmounting = false;\n\n      this.updatePlotly(true, this.props.onInitialized, true);\n    }\n\n    componentDidUpdate(prevProps) {\n      this.unmounting = false;\n\n      // frames *always* changes identity so fall back to check length only :(\n      const numPrevFrames =\n        prevProps.frames && prevProps.frames.length ? prevProps.frames.length : 0;\n      const numNextFrames =\n        this.props.frames && this.props.frames.length ? this.props.frames.length : 0;\n\n      const figureChanged = !(\n        prevProps.layout === this.props.layout &&\n        prevProps.data === this.props.data &&\n        prevProps.config === this.props.config &&\n        numNextFrames === numPrevFrames\n      );\n      const revisionDefined = prevProps.revision !== void 0;\n      const revisionChanged = prevProps.revision !== this.props.revision;\n\n      if (!figureChanged && (!revisionDefined || (revisionDefined && !revisionChanged))) {\n        return;\n      }\n\n      this.updatePlotly(false, this.props.onUpdate, false);\n    }\n\n    componentWillUnmount() {\n      this.unmounting = true;\n\n      this.figureCallback(this.props.onPurge);\n\n      if (this.resizeHandler && isBrowser) {\n        window.removeEventListener('resize', this.resizeHandler);\n        this.resizeHandler = null;\n      }\n\n      this.removeUpdateEvents();\n\n      Plotly.purge(this.el);\n    }\n\n    attachUpdateEvents() {\n      if (!this.el || !this.el.removeListener) {\n        return;\n      }\n\n      updateEvents.forEach((updateEvent) => {\n        this.el.on(updateEvent, this.handleUpdate);\n      });\n    }\n\n    removeUpdateEvents() {\n      if (!this.el || !this.el.removeListener) {\n        return;\n      }\n\n      updateEvents.forEach((updateEvent) => {\n        this.el.removeListener(updateEvent, this.handleUpdate);\n      });\n    }\n\n    handleUpdate() {\n      this.figureCallback(this.props.onUpdate);\n    }\n\n    figureCallback(callback) {\n      if (typeof callback === 'function') {\n        const {data, layout} = this.el;\n        const frames = this.el._transitionData ? this.el._transitionData._frames : null;\n        const figure = {data, layout, frames};\n        callback(figure, this.el);\n      }\n    }\n\n    syncWindowResize(invoke) {\n      if (!isBrowser) {\n        return;\n      }\n\n      if (this.props.useResizeHandler && !this.resizeHandler) {\n        this.resizeHandler = () => Plotly.Plots.resize(this.el);\n        window.addEventListener('resize', this.resizeHandler);\n        if (invoke) {\n          this.resizeHandler();\n        }\n      } else if (!this.props.useResizeHandler && this.resizeHandler) {\n        window.removeEventListener('resize', this.resizeHandler);\n        this.resizeHandler = null;\n      }\n    }\n\n    getRef(el) {\n      this.el = el;\n\n      if (this.props.debug && isBrowser) {\n        window.gd = this.el;\n      }\n    }\n\n    // Attach and remove event handlers as they're added or removed from props:\n    syncEventHandlers() {\n      eventNames.forEach((eventName) => {\n        const prop = this.props['on' + eventName];\n        const handler = this.handlers[eventName];\n        const hasHandler = Boolean(handler);\n\n        if (prop && !hasHandler) {\n          this.addEventHandler(eventName, prop);\n        } else if (!prop && hasHandler) {\n          // Needs to be removed:\n          this.removeEventHandler(eventName);\n        } else if (prop && hasHandler && prop !== handler) {\n          // replace the handler\n          this.removeEventHandler(eventName);\n          this.addEventHandler(eventName, prop);\n        }\n      });\n    }\n\n    addEventHandler(eventName, prop) {\n      this.handlers[eventName] = prop;\n      this.el.on(this.getPlotlyEventName(eventName), this.handlers[eventName]);\n    }\n\n    removeEventHandler(eventName) {\n      this.el.removeListener(this.getPlotlyEventName(eventName), this.handlers[eventName]);\n      delete this.handlers[eventName];\n    }\n\n    getPlotlyEventName(eventName) {\n      return 'plotly_' + eventName.toLowerCase();\n    }\n\n    render() {\n      return (\n        <div\n          id={this.props.divId}\n          style={this.props.style}\n          ref={this.getRef}\n          className={this.props.className}\n        />\n      );\n    }\n  }\n\n  PlotlyComponent.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.object),\n    config: PropTypes.object,\n    layout: PropTypes.object,\n    frames: PropTypes.arrayOf(PropTypes.object),\n    revision: PropTypes.number,\n    onInitialized: PropTypes.func,\n    onPurge: PropTypes.func,\n    onError: PropTypes.func,\n    onUpdate: PropTypes.func,\n    debug: PropTypes.bool,\n    style: PropTypes.object,\n    className: PropTypes.string,\n    useResizeHandler: PropTypes.bool,\n    divId: PropTypes.string,\n  };\n\n  eventNames.forEach((eventName) => {\n    PlotlyComponent.propTypes['on' + eventName] = PropTypes.func;\n  });\n\n  PlotlyComponent.defaultProps = {\n    debug: false,\n    useResizeHandler: false,\n    data: [],\n    style: {position: 'relative', display: 'inline-block'},\n  };\n\n  return PlotlyComponent;\n}\n"]},"metadata":{},"sourceType":"script"}